Index: src/main/java/ServerApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Servlet.*;\r\nimport collections.Database;\r\nimport collections.UserCollection;\r\nimport interfaces.UserDAO;\r\nimport models.User;\r\nimport org.eclipse.jetty.server.Server;\r\nimport org.eclipse.jetty.servlet.ServletContextHandler;\r\nimport org.eclipse.jetty.servlet.ServletHolder;\r\n\r\nimport java.sql.Connection;\r\nimport java.util.List;\r\n\r\npublic class ServerApp {\r\n    public static void main(String[] args) throws Exception {\r\n\r\n//        UserDAO userdao = new UserCollection();\r\n//        User user = userdao.get(23);\r\n//        System.out.println(user);\r\n\r\n\r\n//        List<User> users;\r\n//        UserDAO userDAO = new UserCollection();\r\n//        users = userDAO.getAll();\r\n//        for (User user : users){\r\n//            System.out.println(user);\r\n//        }\r\n\r\n\r\n//        UserDAO userDAO = new UserCollection();\r\n//        User user = new User(77,\"Azar@gmail.com\",\"456\",\"Azar\",\"photo\");\r\n//        int result = userDAO.insert(user);\r\n//        System.out.println(result);\r\n\r\n\r\n        UserDAO userDAO = new UserCollection();\r\n        User user = new User(7,\"Ibra@gmail.com\",\"111\",\"Ibr\",\"photok\");\r\n        int result = userDAO.update(user);\r\n        System.out.println(result);\r\n\r\n\r\n\r\n//        UserCollection user = new UserCollection();\r\n//        Server server = new Server(2022);\r\n//        ServletContextHandler handler = new ServletContextHandler();\r\n//        handler.addServlet(new ServletHolder(new TestServlet()), \"/users\");\r\n//        handler.addServlet(new ServletHolder(new PeopleListServlet()), \"/show\");\r\n//        handler.addServlet(new ServletHolder(new LikePageServlet()), \"/likePage\");\r\n//        handler.addServlet(new ServletHolder(new ChatServlet()), \"/chat\");\r\n//        handler.addServlet(new ServletHolder(new LoginServlet()), \"/login\");\r\n//        handler.addServlet(new ServletHolder(new StaticFileServlet()), \"/*\");\r\n//        server.setHandler(handler);\r\n//        server.start();\r\n//        server.join();\r\n\r\n//        user.saved();\r\n//        System.out.println( user.save());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ServerApp.java b/src/main/java/ServerApp.java
--- a/src/main/java/ServerApp.java	(revision edd281589933aa94bdf53b40c48b2ca069c71499)
+++ b/src/main/java/ServerApp.java	(date 1666792500145)
@@ -11,8 +11,12 @@
 import java.util.List;
 
 public class ServerApp {
+    static LoginServlet loginServlet = new LoginServlet();
+    static UserCollection userCollection = new UserCollection();
+
     public static void main(String[] args) throws Exception {
-
+         loginServlet.templateUsers();
+    //    userCollection.getAll();
 //        UserDAO userdao = new UserCollection();
 //        User user = userdao.get(23);
 //        System.out.println(user);
@@ -21,36 +25,29 @@
 //        List<User> users;
 //        UserDAO userDAO = new UserCollection();
 //        users = userDAO.getAll();
-//        for (User user : users){
+//        for (User user : users) {
 //            System.out.println(user);
 //        }
 
 
 //        UserDAO userDAO = new UserCollection();
-//        User user = new User(77,"Azar@gmail.com","456","Azar","photo");
-//        int result = userDAO.insert(user);
+//        User user = new User(7,"Ibra@gmail.com","111","Ibr","photok");
+//        int result = userDAO.update(user);
 //        System.out.println(result);
 
 
-        UserDAO userDAO = new UserCollection();
-        User user = new User(7,"Ibra@gmail.com","111","Ibr","photok");
-        int result = userDAO.update(user);
-        System.out.println(result);
-
-
-
-//        UserCollection user = new UserCollection();
-//        Server server = new Server(2022);
-//        ServletContextHandler handler = new ServletContextHandler();
-//        handler.addServlet(new ServletHolder(new TestServlet()), "/users");
-//        handler.addServlet(new ServletHolder(new PeopleListServlet()), "/show");
-//        handler.addServlet(new ServletHolder(new LikePageServlet()), "/likePage");
-//        handler.addServlet(new ServletHolder(new ChatServlet()), "/chat");
-//        handler.addServlet(new ServletHolder(new LoginServlet()), "/login");
-//        handler.addServlet(new ServletHolder(new StaticFileServlet()), "/*");
-//        server.setHandler(handler);
-//        server.start();
-//        server.join();
+        UserCollection user = new UserCollection();
+        Server server = new Server(2022);
+        ServletContextHandler handler = new ServletContextHandler();
+        handler.addServlet(new ServletHolder(new TestServlet()), "/users");
+        handler.addServlet(new ServletHolder(new PeopleListServlet()), "/show");
+        handler.addServlet(new ServletHolder(new LikePageServlet()), "/likePage");
+        handler.addServlet(new ServletHolder(new ChatServlet()), "/chat");
+        handler.addServlet(new ServletHolder(new LoginServlet()), "/login");
+        handler.addServlet(new ServletHolder(new StaticFileServlet()), "/*");
+        server.setHandler(handler);
+        server.start();
+        server.join();
 
 //        user.saved();
 //        System.out.println( user.save());
Index: src/main/java/collections/UserCollection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package collections;\r\n\r\nimport interfaces.UserDAO;\r\nimport models.User;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class UserCollection implements UserDAO {\r\n    static Map<Integer, User> userData = new HashMap<>();\r\n     User user = new User();\r\n    public static Map<Integer, User> save(){\r\n        userData.put(1, new User(\"cristiano.ronaldo@gmail.com\", \"123456\"));\r\n        userData.put(2, new User(\"leo.messi@gmail.com\", \"123456\"));\r\n        userData.put(3, new User(\"elon.musk@gmail.com\", \"123456\"));\r\n        userData.put(4, new User(\"selena.gomez@gmail.com\", \"123456\"));\r\n        return userData;\r\n    }\r\n    public void newUser() {\r\n        userData.put(user.id, new User(user.username, user.password));\r\n    }\r\n\r\n    @Override\r\n    public User get(int id) throws SQLException {\r\n        Connection con = Database.getConnection();\r\n        User user = null;\r\n        String sql = \"SELECT id, username, password,name, photo FROM data WHERE id = ?\";\r\n\r\n        PreparedStatement ps = con.prepareStatement(sql);\r\n        ps.setInt(1, id);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            int oid = rs.getInt(\"id\");\r\n            String username = rs.getString(\"username\");\r\n            String password = rs.getString(\"password\");\r\n            String name = rs.getString(\"name\");\r\n            String photo = rs.getString(\"photo\");\r\n            user = new User(oid, username, password, name, photo);\r\n        }\r\n        return user;\r\n    }\r\n\r\n    @Override\r\n    public List<User> getAll() throws SQLException {\r\n        Connection con = Database.getConnection();\r\n        String sql = \"SELECT id, username, password,name , photo FROM data\";\r\n        List<User> users = new ArrayList<>();\r\n\r\n        Statement stat = con.createStatement();\r\n        ResultSet rs = stat.executeQuery(sql);\r\n        while(rs.next()){\r\n            int id = rs.getInt(\"id\");\r\n            String username = rs.getString(\"username\");\r\n            String password = rs.getString(\"password\");\r\n            String name = rs.getString(\"name\");\r\n            String photo = rs.getString(\"photo\");\r\n            User user1 = new User(id, username, password, name, photo);\r\n            users.add(user1);\r\n        }\r\n        return users;\r\n\r\n    }\r\n\r\n    @Override\r\n    public int save(User user) throws SQLException {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public int insert(User user) throws SQLException {\r\n        Connection con = Database.getConnection();\r\n        String sql = \"INSERT INTO data (id, username, password, name, photo) VALUES (?,?,?,?,?)\";\r\n        PreparedStatement ps = con.prepareStatement(sql);\r\n        ps.setInt(1, user.getId());\r\n        ps.setString(2,user.getUsername());\r\n        ps.setString(3,user.getPassword());\r\n        ps.setString(4,user.getName());\r\n        ps.setString(5,user.getPhoto());\r\n\r\n        int result = ps.executeUpdate();\r\n        Database.closePreparedStatement(ps);\r\n        Database.closeConnection(con);\r\n        return result;\r\n\r\n    }\r\n\r\n    @Override\r\n    public int update(User user) throws SQLException {\r\n//        Connection con = Database.getConnection();\r\n//        String sql = \"UPDATE data set  id=?, username = ?, password=?, name=?, photo=? WHERE id=?\";\r\n//        PreparedStatement ps= con.prepareStatement(sql);\r\n//        ps.setInt(1, user.getId());\r\n//        ps.setString(3,user.getUsername());\r\n//        ps.setString(4,user.getPassword());\r\n//        ps.setString(5,user.getName());\r\n//        ps.setString(6,user.getPhoto());\r\n//        ps.setInt(7,user.get);\r\n//\r\n//        int result = ps.executeUpdate();\r\n//        Database.closePreparedStatement(ps);\r\n//        Database.closeConnection(con);\r\n//        return result;\r\n        return 1;\r\n    }\r\n\r\n    @Override\r\n    public int delete(User user) {\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/collections/UserCollection.java b/src/main/java/collections/UserCollection.java
--- a/src/main/java/collections/UserCollection.java	(revision edd281589933aa94bdf53b40c48b2ca069c71499)
+++ b/src/main/java/collections/UserCollection.java	(date 1666793210604)
@@ -4,15 +4,13 @@
 import models.User;
 
 import java.sql.*;
-import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 
 public class UserCollection implements UserDAO {
     static Map<Integer, User> userData = new HashMap<>();
      User user = new User();
-    public static Map<Integer, User> save(){
+    public static Map<Integer, User> saved(){
         userData.put(1, new User("cristiano.ronaldo@gmail.com", "123456"));
         userData.put(2, new User("leo.messi@gmail.com", "123456"));
         userData.put(3, new User("elon.musk@gmail.com", "123456"));
@@ -44,23 +42,23 @@
     }
 
     @Override
-    public List<User> getAll() throws SQLException {
+    public void getAll() throws SQLException {
         Connection con = Database.getConnection();
         String sql = "SELECT id, username, password,name , photo FROM data";
-        List<User> users = new ArrayList<>();
+
 
         Statement stat = con.createStatement();
         ResultSet rs = stat.executeQuery(sql);
         while(rs.next()){
             int id = rs.getInt("id");
-            String username = rs.getString("username");
-            String password = rs.getString("password");
-            String name = rs.getString("name");
-            String photo = rs.getString("photo");
-            User user1 = new User(id, username, password, name, photo);
-            users.add(user1);
+            user.username = rs.getString("username");
+            user.password = rs.getString("password");
+            user.name = rs.getString("name");
+            user.photo = rs.getString("photo");
+            User user1 = new User(id, user.username, user.password, user.name, user.photo);
+            user.users.add(user1);
         }
-        return users;
+
 
     }
 
Index: src/main/java/models/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport java.util.*;\r\n\r\npublic class User {\r\n    public int id;\r\n\r\n    public String name;\r\n    public String username;\r\n    public String password;\r\n    public String photo;\r\n    public int userID;\r\n    public List<Integer> idList = new ArrayList<>();\r\n    public Map<Integer, List<Integer>> liked = new HashMap<>();\r\n    public static Map<String, String> loginPass = new HashMap<>();\r\n    private boolean firstConstructor = false;\r\n    private boolean secondConstructor = false;\r\n    private boolean thirdConstructor = false;\r\n    private boolean fourthConstructor = false;\r\n\r\n\r\n    /** Added */\r\n    public User(int id,String username,String password,String name,String photo){\r\n        this.id = id;\r\n        this.username = username;\r\n        this.password = password;\r\n        this.name = name;\r\n        this.photo = photo;\r\n        firstConstructor = true;\r\n    }\r\n    public User(int id, String username, String photo, Map<Integer, List<Integer>> liked) {\r\n        this.id = id;\r\n        this.username = username;\r\n        this.photo = photo;\r\n        this.liked = liked;\r\n        secondConstructor = true;\r\n    }\r\n\r\n    public User(String username, String password) {\r\n        this.username = username;\r\n        this.password = password;\r\n        thirdConstructor = true;\r\n\r\n    }\r\n    public User(int id) {\r\n        this.id = id;\r\n        fourthConstructor = true;\r\n    }\r\n\r\n    public User() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        if (firstConstructor)\r\n            return \"id=\" + id + \", username='\" + username + '\\'' +\r\n                        \", password='\" + password + '\\'' +\r\n                        \", name='\" + name + '\\'' +\r\n                \", photo='\" + photo + '\\'' +\r\n                '}';\r\n        if (secondConstructor)\r\n            return \"models.User{\" +\r\n                    \"id=\" + id +\r\n                    \", username='\" + username + '\\'' +\r\n                    \", photo='\" + photo + '\\'' +\r\n                    \", liked='\" + liked + '\\'' +\r\n                    '}';\r\n        else if (thirdConstructor)\r\n            return \"username=\" + username + '\\'' +\r\n                    \", password=\" + password;\r\n        else if (fourthConstructor)\r\n            return \"id=\" + id;\r\nelse\r\n        return null;\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        User user = (User) o;\r\n        return id == user.id && username.equals(user.username) && photo.equals(user.photo) && liked.equals(user.liked);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(id, username, photo, liked);\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public String getPhoto() {\r\n        return photo;\r\n    }\r\n\r\n    public void setPhoto(String photo) {\r\n        this.photo = photo;\r\n    }\r\n\r\n    public List<Integer> getIdList() {\r\n        return idList;\r\n    }\r\n\r\n    public void setIdList(List<Integer> idList) {\r\n        this.idList = idList;\r\n    }\r\n\r\n    public Map<Integer, List<Integer>> getLiked() {\r\n        return liked;\r\n    }\r\n\r\n    public void setLiked(Map<Integer, List<Integer>> liked) {\r\n        this.liked = liked;\r\n    }\r\n\r\n    public boolean isFirstConstructor() {\r\n        return firstConstructor;\r\n    }\r\n\r\n    public void setFirstConstructor(boolean firstConstructor) {\r\n        this.firstConstructor = firstConstructor;\r\n    }\r\n\r\n    public boolean isSecondConstructor() {\r\n        return secondConstructor;\r\n    }\r\n\r\n    public void setSecondConstructor(boolean secondConstructor) {\r\n        this.secondConstructor = secondConstructor;\r\n    }\r\n\r\n    public boolean isThirdConstructor() {\r\n        return thirdConstructor;\r\n    }\r\n\r\n    public void setThirdConstructor(boolean thirdConstructor) {\r\n        this.thirdConstructor = thirdConstructor;\r\n    }\r\n\r\n    public boolean isFourthConstructor() {\r\n        return fourthConstructor;\r\n    }\r\n\r\n    public void setFourthConstructor(boolean fourthConstructor) {\r\n        this.fourthConstructor = fourthConstructor;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/User.java b/src/main/java/models/User.java
--- a/src/main/java/models/User.java	(revision edd281589933aa94bdf53b40c48b2ca069c71499)
+++ b/src/main/java/models/User.java	(date 1666786258444)
@@ -11,6 +11,7 @@
     public String photo;
     public int userID;
     public List<Integer> idList = new ArrayList<>();
+    public List<User> users = new ArrayList<>();
     public Map<Integer, List<Integer>> liked = new HashMap<>();
     public static Map<String, String> loginPass = new HashMap<>();
     private boolean firstConstructor = false;
Index: src/main/java/collections/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package collections;\r\n\r\nimport java.sql.*;\r\n\r\npublic class Database {\r\n    private Database(){\r\n\r\n    }\r\n    public static Connection getConnection() throws SQLException{\r\n        Connection connection = null;\r\n        connection = DriverManager.getConnection(\"jdbc:postgresql://localhost:5432/postgres\",\r\n                \"postgres\",\"postgresql\");\r\n        return connection;\r\n    }\r\n    public static void closeConnection(Connection connection) throws SQLException {\r\n        connection.close();\r\n    }\r\n    public static void closeStatement(Statement statement) throws SQLException {\r\n        statement.close();\r\n    }\r\n    public static void closePreparedStatement(PreparedStatement preparedStatement) throws SQLException {\r\n        preparedStatement.close();\r\n    }\r\n    public static void closeResultSet(ResultSet resultSet) throws SQLException {\r\n        resultSet.close();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/collections/Database.java b/src/main/java/collections/Database.java
--- a/src/main/java/collections/Database.java	(revision edd281589933aa94bdf53b40c48b2ca069c71499)
+++ b/src/main/java/collections/Database.java	(date 1666773872404)
@@ -9,7 +9,7 @@
     public static Connection getConnection() throws SQLException{
         Connection connection = null;
         connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres",
-                "postgres","postgresql");
+                "postgres","Ayxan12345");
         return connection;
     }
     public static void closeConnection(Connection connection) throws SQLException {
Index: src/main/java/interfaces/UserDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package interfaces;\r\n\r\nimport models.User;\r\n\r\nimport java.sql.SQLException;\r\nimport java.util.List;\r\n\r\npublic interface UserDAO {\r\n    User get(int id) throws SQLException;\r\n    List<User> getAll() throws SQLException;\r\n    int save(User user) throws SQLException;\r\n    int insert(User user) throws SQLException;\r\n    int update(User user) throws SQLException;\r\n    int delete(User user);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/interfaces/UserDAO.java b/src/main/java/interfaces/UserDAO.java
--- a/src/main/java/interfaces/UserDAO.java	(revision edd281589933aa94bdf53b40c48b2ca069c71499)
+++ b/src/main/java/interfaces/UserDAO.java	(date 1666793210592)
@@ -3,11 +3,10 @@
 import models.User;
 
 import java.sql.SQLException;
-import java.util.List;
 
 public interface UserDAO {
     User get(int id) throws SQLException;
-    List<User> getAll() throws SQLException;
+    void getAll() throws SQLException;
     int save(User user) throws SQLException;
     int insert(User user) throws SQLException;
     int update(User user) throws SQLException;
Index: src/main/java/Servlet/LoginServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Servlet;\r\n\r\nimport collections.LikeCollection;\r\nimport collections.UserCollection;\r\n\r\nimport javax.servlet.RequestDispatcher;\r\nimport javax.servlet.ServletContext;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.util.List;\r\n\r\npublic class LoginServlet extends HttpServlet {\r\n    LikeCollection likeCollection = new LikeCollection();\r\n    UserCollection userCollection = new UserCollection();\r\n    PeopleListServlet peopleListServlet = new PeopleListServlet();\r\n\r\n    // http://localhost:2022/login\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest rq, HttpServletResponse rs) throws ServletException, IOException {\r\n        String fileName = getClass().getClassLoader().getResource(\"login.html\").getFile();\r\n        List<String> lines = Files.readAllLines(Path.of(fileName.substring(1)));\r\n        try (PrintWriter w = rs.getWriter()) {\r\n            for (String line : lines) {\r\n                w.println(line);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n//\r\n    @Override\r\n    protected void doPost(HttpServletRequest rq, HttpServletResponse rs) throws ServletException, IOException {\r\n        try (PrintWriter w = rs.getWriter()) {\r\n            String email = rq.getParameter(\"inputEmail\");\r\n            String password = rq.getParameter(\"inputPassword\");\r\n//if ()\r\n            rs.setContentType(\"text/html\");\r\n            PrintWriter pw=rs.getWriter();\r\n\r\n            rs.sendRedirect(\"http://localhost:2022/likePage\");\r\n\r\n            pw.close();\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Servlet/LoginServlet.java b/src/main/java/Servlet/LoginServlet.java
--- a/src/main/java/Servlet/LoginServlet.java	(revision edd281589933aa94bdf53b40c48b2ca069c71499)
+++ b/src/main/java/Servlet/LoginServlet.java	(date 1666793252390)
@@ -2,6 +2,9 @@
 
 import collections.LikeCollection;
 import collections.UserCollection;
+import interfaces.UserDAO;
+import lombok.SneakyThrows;
+import models.User;
 
 import javax.servlet.RequestDispatcher;
 import javax.servlet.ServletContext;
@@ -13,12 +16,17 @@
 import java.io.PrintWriter;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.sql.SQLException;
 import java.util.List;
 
+import static com.sun.org.apache.xpath.internal.compiler.Token.contains;
+
 public class LoginServlet extends HttpServlet {
+    User user = new User();
     LikeCollection likeCollection = new LikeCollection();
     UserCollection userCollection = new UserCollection();
     PeopleListServlet peopleListServlet = new PeopleListServlet();
+    UserDAO userDAO = new UserCollection();
 
     // http://localhost:2022/login
 
@@ -33,27 +41,61 @@
         }
     }
 
+    public static int randomId() {
+        int min = 15;
+        int max = 99;
 
+        //Generate random id value from 15 to 99
+
+        int ramId = (int) Math.floor(Math.random() * (max - min + 1) + min);
+        return ramId;
+    }
 
 
-//
+    //
+    @SneakyThrows
     @Override
     protected void doPost(HttpServletRequest rq, HttpServletResponse rs) throws ServletException, IOException {
         try (PrintWriter w = rs.getWriter()) {
-            String email = rq.getParameter("inputEmail");
-            String password = rq.getParameter("inputPassword");
-//if ()
+            String email = rq.getParameter("email");
+            String password = rq.getParameter("password");
             rs.setContentType("text/html");
-            PrintWriter pw=rs.getWriter();
+            PrintWriter pw = rs.getWriter();
+userCollection.getAll();
+                if (user.users.contains(email) && user.users.contains(password)) {
+                    userCollection.getAll();
+                    System.out.println(user.users);
 
-            rs.sendRedirect("http://localhost:2022/likePage");
+                   // rs.sendRedirect("http://localhost:2022/likePage");
 
+                } else {
+                    userCollection.getAll();
+                    System.out.println(user.users);
+              //  rs.sendRedirect("http://localhost:2022/login");
+
+                }
             pw.close();
+//                } else if (!user.users.contains(email)) {
+//
+//                    user.id = randomId();
+//                    user.username = email;
+//                    user.password = password;
+//                }
+//                int a = 5;
+//                User user = new User(a, user.username, user.password, "NewUser", "https://static.thenounproject.com/png/70749-200.png");
+//                userDAO.insert(user);
+            }
+        }
 
-        }
 
 
 
+    public void templateUsers() throws SQLException {
+        User user1 = new User(11, "cristiano.ronaldo@gmail.com", "123456", "Cristiano", "photo");
+        User user2 = new User(12, "leo.messi@gmail.com", "123456", "Leo", "photo");
+        User user3 = new User(13, "elon.musk@gmail.com", "123456", "Elon", "photo");
+        User user4 = new User(14, "selena.gomez@gmail.com", "123456", "Selena", "photo");
+        int a = userDAO.insert(user1) + userDAO.insert(user2) + userDAO.insert(user3) + userDAO.insert(user4);
 
     }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9d2c5cba-e592-47b6-b0d5-0c50488a926e\" name=\"Changes\" comment=\"Database V2\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ServerApp.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ServerApp.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/collections/Database.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/collections/Database.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/collections/UserCollection.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/collections/UserCollection.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/models/User.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/models/User.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"HTML File\" />\r\n        <option value=\"Interface\" />\r\n        <option value=\"AnnotationType\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Fwj935uCeMRBJU9bMgLVAeKXuS\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"DefaultHtmlFileTemplate\": \"HTML File\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"last_opened_file_path\": \"C:/Users/azari/IdeaProjects/SelfStudy/src/main/java/dao\",\r\n    \"project.structure.last.edited\": \"SDKs\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"DatabaseDriversLRU\": [\r\n      \"postgresql\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"models\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Honour\\IdeaProjects\\TinderApp\\src\\main\\resources\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\azari\\IdeaProjects\\TinderApp\\src\\main\\resources\" />\r\n      <recent name=\"C:\\Users\\azari\\IdeaProjects\\TinderApp\\templates\" />\r\n      <recent name=\"C:\\Users\\Honour\\IdeaProjects\\TinderApp\\src\\main\\resources\" />\r\n      <recent name=\"C:\\Users\\Honour\\IdeaProjects\\TinderApp\\templates\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"ServerApp\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ServerApp\" />\r\n      <module name=\"TinderApp\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.ServerApp\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9d2c5cba-e592-47b6-b0d5-0c50488a926e\" name=\"Changes\" comment=\"\" />\r\n      <created>1665409892280</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1665409892280</updated>\r\n      <workItem from=\"1665409893680\" duration=\"331000\" />\r\n      <workItem from=\"1665495213548\" duration=\"2347000\" />\r\n      <workItem from=\"1665897394610\" duration=\"2254000\" />\r\n      <workItem from=\"1665901612802\" duration=\"3941000\" />\r\n      <workItem from=\"1665906102365\" duration=\"15454000\" />\r\n      <workItem from=\"1666090871020\" duration=\"10397000\" />\r\n      <workItem from=\"1666526687420\" duration=\"3112000\" />\r\n      <workItem from=\"1666607778528\" duration=\"6067000\" />\r\n      <workItem from=\"1666691285972\" duration=\"12470000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Commit and push\">\r\n      <created>1665410127947</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665410127947</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Test Servlet\">\r\n      <created>1665413892472</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665413892473</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Static File Servlet\">\r\n      <created>1665496540257</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665496540257</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Static File Servlet\">\r\n      <created>1665859668706</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665859668706</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"DAO\">\r\n      <created>1666452803823</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1666452803823</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Added new features\">\r\n      <created>1666533549157</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1666533549157</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Added new features\">\r\n      <created>1666533558365</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1666533558365</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Added new features\">\r\n      <created>1666534544337</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1666534544337</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Database initial\">\r\n      <created>1666613400313</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1666613400336</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Database V2\">\r\n      <created>1666707860726</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1666707860726</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"11\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Commit and push\" />\r\n    <MESSAGE value=\"Test Servet\" />\r\n    <MESSAGE value=\"Test Servlet\" />\r\n    <MESSAGE value=\"Static File Servlet\" />\r\n    <MESSAGE value=\"DAO\" />\r\n    <MESSAGE value=\"Added new features\" />\r\n    <MESSAGE value=\"Database initial\" />\r\n    <MESSAGE value=\"Database V2\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Database V2\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision edd281589933aa94bdf53b40c48b2ca069c71499)
+++ b/.idea/workspace.xml	(date 1666793596248)
@@ -4,11 +4,14 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="9d2c5cba-e592-47b6-b0d5-0c50488a926e" name="Changes" comment="Database V2">
+    <list default="true" id="9d2c5cba-e592-47b6-b0d5-0c50488a926e" name="Changes" comment="Added new features">
+      <change beforePath="$PROJECT_DIR$/.idea/dataSources.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/ServerApp.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ServerApp.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Servlet/LoginServlet.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Servlet/LoginServlet.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/collections/Database.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/collections/Database.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/collections/UserCollection.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/collections/UserCollection.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/interfaces/UserDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/interfaces/UserDAO.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/models/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/models/User.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -58,7 +61,8 @@
     "last_opened_file_path": "C:/Users/azari/IdeaProjects/SelfStudy/src/main/java/dao",
     "project.structure.last.edited": "SDKs",
     "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.2"
+    "project.structure.side.proportion": "0.2",
+    "settings.editor.selected.configurable": "reference.projectsettings.compiler.javacompiler"
   },
   "keyToStringList": {
     "DatabaseDriversLRU": [
@@ -117,6 +121,8 @@
       <workItem from="1666526687420" duration="3112000" />
       <workItem from="1666607778528" duration="6067000" />
       <workItem from="1666691285972" duration="12470000" />
+      <workItem from="1666760206450" duration="46000" />
+      <workItem from="1666764482165" duration="18223000" />
     </task>
     <task id="LOCAL-00001" summary="Commit and push">
       <created>1665410127947</created>
@@ -188,7 +194,14 @@
       <option name="project" value="LOCAL" />
       <updated>1666707860726</updated>
     </task>
-    <option name="localTasksCounter" value="11" />
+    <task id="LOCAL-00011" summary="Added new features">
+      <created>1666713947523</created>
+      <option name="number" value="00011" />
+      <option name="presentableId" value="LOCAL-00011" />
+      <option name="project" value="LOCAL" />
+      <updated>1666713947523</updated>
+    </task>
+    <option name="localTasksCounter" value="12" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -211,9 +224,9 @@
     <MESSAGE value="Test Servlet" />
     <MESSAGE value="Static File Servlet" />
     <MESSAGE value="DAO" />
-    <MESSAGE value="Added new features" />
     <MESSAGE value="Database initial" />
     <MESSAGE value="Database V2" />
-    <option name="LAST_COMMIT_MESSAGE" value="Database V2" />
+    <MESSAGE value="Added new features" />
+    <option name="LAST_COMMIT_MESSAGE" value="Added new features" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/dataSources.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DataSourceManagerImpl\" format=\"xml\" multifile-model=\"true\">\r\n    <data-source source=\"LOCAL\" name=\"postgres@localhost\" uuid=\"a0b6f537-78df-458c-aed0-e9c08e572923\">\r\n      <driver-ref>postgresql</driver-ref>\r\n      <synchronize>true</synchronize>\r\n      <jdbc-driver>org.postgresql.Driver</jdbc-driver>\r\n      <jdbc-url>jdbc:postgresql://localhost:5432/postgres</jdbc-url>\r\n      <working-dir>$ProjectFileDir$</working-dir>\r\n    </data-source>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.xml b/.idea/dataSources.xml
--- a/.idea/dataSources.xml	(revision edd281589933aa94bdf53b40c48b2ca069c71499)
+++ b/.idea/dataSources.xml	(date 1666773702327)
@@ -8,5 +8,12 @@
       <jdbc-url>jdbc:postgresql://localhost:5432/postgres</jdbc-url>
       <working-dir>$ProjectFileDir$</working-dir>
     </data-source>
+    <data-source source="LOCAL" name="Postgreql" uuid="db3bf52f-8343-4614-90b6-c0c53163e495">
+      <driver-ref>postgresql</driver-ref>
+      <synchronize>true</synchronize>
+      <jdbc-driver>org.postgresql.Driver</jdbc-driver>
+      <jdbc-url>jdbc:postgresql://localhost:5432/postgres</jdbc-url>
+      <working-dir>$ProjectFileDir$</working-dir>
+    </data-source>
   </component>
 </project>
\ No newline at end of file
